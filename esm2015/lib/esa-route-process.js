import { __awaiter } from "tslib";
import { registerPlugin } from '@scullyio/scully';
import * as fs from 'fs/promises';
import { marked } from 'marked';
// @ts-ignore
import { JSDOM } from 'jsdom';
const Plugin = (routes, config = {}) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    if (!routes) {
        return [];
    }
    for (let i = 0, l = routes.length; i < l; i++) {
        const route = routes[i];
        if (route.type !== 'contentFolder')
            continue;
        if (route.data === undefined) {
            route.data = {};
        }
        // Remove strange extension (".html") added by esa from the url
        if ((_a = route.templateFile) === null || _a === void 0 ? void 0 : _a.match(/\.html\.md$/)) {
            route.route = route.route.replace(/\.html$/, '');
        }
        // Convert tags string to array
        if (route.data && route.data.tags && typeof route.data.tags == 'string') {
            route.data.tags = route.data.tags.split(/\s*,\s*/);
        }
        // Parse file
        if (route.templateFile && route.templateFile.match(/\.md$/)) {
            try {
                let markdown = yield fs.readFile(route.templateFile, 'utf-8');
                let markdownLines = markdown.split(/\n/);
                let endLineOfMetaData = 0;
                for (let i = 1; i < markdownLines.length; i++) {
                    if (markdownLines[i].match(/^---$/)) {
                        endLineOfMetaData = i;
                        break;
                    }
                }
                markdown = markdownLines.slice(endLineOfMetaData + 1).join('\n');
                const html = marked.parse(markdown);
                const dom = new JSDOM(html);
                // Extract beginning text
                route.data.beginningText = '';
                const paragraphs = dom.window.document.querySelectorAll('p');
                for (let i = 0; i < paragraphs.length; i++) {
                    const paragraph = paragraphs[i];
                    if ((_b = paragraph.textContent) === null || _b === void 0 ? void 0 : _b.length) {
                        route.data.beginningText += paragraph.textContent;
                    }
                    if (route.data.beginningText.length > 200) {
                        break;
                    }
                }
                // Extract images
                route.data.imageUrls = [];
                const imageElems = dom.window.document.querySelectorAll('img');
                for (let i = 0; i < imageElems.length; i++) {
                    const image = imageElems[i];
                    route.data.imageUrls.push(image.src);
                }
            }
            catch (e) {
                console.error(`[EsaRouteProcess]`, e);
            }
        }
        else {
            console.warn(`[EsaRouteProcess]`, 'Could not parse file', route.templateFile);
        }
        routes[i] = route;
    }
    return routes;
});
registerPlugin('routeProcess', 'esaRouteProcess', Plugin, 100);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXNhLXJvdXRlLXByb2Nlc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9zY3VsbHktcGx1Z2luLWVzYS9zcmMvbGliL2VzYS1yb3V0ZS1wcm9jZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFnQixNQUFNLGtCQUFrQixDQUFDO0FBQ2hFLE9BQU8sS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFaEMsYUFBYTtBQUNiLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFFOUIsTUFBTSxNQUFNLEdBQUcsQ0FBTyxNQUF1QixFQUFFLE1BQU0sR0FBRyxFQUFFLEVBQTJCLEVBQUU7O0lBQ3JGLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDWCxPQUFPLEVBQUUsQ0FBQztLQUNYO0lBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUM3QyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFeEIsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLGVBQWU7WUFBRSxTQUFTO1FBRTdDLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7WUFDNUIsS0FBSyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7U0FDakI7UUFFRCwrREFBK0Q7UUFDL0QsSUFBSSxNQUFBLEtBQUssQ0FBQyxZQUFZLDBDQUFFLEtBQUssQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUM1QyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUNsRDtRQUVELCtCQUErQjtR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bUIsRUFBRSxzQkFBc0IsRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDL0U7UUFFRCxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO0tBQ25CO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyxDQUFBLENBQUM7QUFFRixjQUFjLENBQUMsY0FBYyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlZ2lzdGVyUGx1Z2luLCBIYW5kbGVkUm91dGUgfSBmcm9tICdAc2N1bGx5aW8vc2N1bGx5JztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzL3Byb21pc2VzJztcbmltcG9ydCB7IG1hcmtlZCB9IGZyb20gJ21hcmtlZCc7XG5cbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7IEpTRE9NIH0gZnJvbSAnanNkb20nO1xuXG5jb25zdCBQbHVnaW4gPSBhc3luYyAocm91dGVzPzogSGFuZGxlZFJvdXRlW10sIGNvbmZpZyA9IHt9KTogUHJvbWlzZTxIYW5kbGVkUm91dGVbXT4gPT4ge1xuICBpZiAoIXJvdXRlcykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gcm91dGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGNvbnN0IHJvdXRlID0gcm91dGVzW2ldO1xuXG4gICAgaWYgKHJvdXRlLnR5cGUgIT09ICdjb250ZW50Rm9sZGVyJykgY29udGludWU7XG5cbiAgICBpZiAocm91dGUuZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByb3V0ZS5kYXRhID0ge307XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIHN0cmFuZ2UgZXh0ZW5zaW9uIChcIi5odG1sXCIpIGFkZGVkIGJ5IGVzYSBmcm9tIHRoZSB1cmxcbiAgICBpZiAocm91dGUudGVtcGxhdGVGaWxlPy5tYXRjaCgvXFwuaHRtbFxcLm1kJC8pKSB7XG4gICAgICByb3V0ZS5yb3V0ZSA9IHJvdXRlLnJvdXRlLnJlcGxhY2UoL1xcLmh0bWwkLywgJycpO1xuICAgIH1cblxuICAgIC8vIENvbnZlcnQgdGFncyBzdHJpbmcgdG8gYXJyYXlcbiAgICBpZiAocm91dGUuZGF0YSAmJiByb3V0ZS5kYXRhLnRhZ3MgJiYgdHlwZW9mIHJvdXRlLmRhdGEudGFncyA9PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUuZGF0YS50YWdzID0gcm91dGUuZGF0YS50YWdzLnNwbGl0KC9cXHMqLFxccyovKTtcbiAgICB9XG5cbiAgICAvLyBQYXJzZSBmaWxlXG4gICAgaWYgKHJvdXRlLnRlbXBsYXRlRmlsZSAmJiByb3V0ZS50ZW1wbGF0ZUZpbGUubWF0Y2goL1xcLm1kJC8pKSB7XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgbWFya2Rvd24gPSBhd2FpdCBmcy5yZWFkRmlsZShyb3V0ZS50ZW1wbGF0ZUZpbGUsICd1dGYtOCcpO1xuICAgICAgICBsZXQgbWFya2Rvd25MaW5lcyA9IG1hcmtkb3duLnNwbGl0KC9cXG4vKTtcbiAgICAgICAgbGV0IGVuZExpbmVPZk1ldGFEYXRhID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBtYXJrZG93bkxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKG1hcmtkb3duTGluZXNbaV0ubWF0Y2goL14tLS0kLykpIHtcbiAgICAgICAgICAgIGVuZExpbmVPZk1ldGFEYXRhID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBtYXJrZG93biA9IG1hcmtkb3duTGluZXMuc2xpY2UoZW5kTGluZU9mTWV0YURhdGEgKyAxKS5qb2luKCdcXG4nKTtcblxuICAgICAgICBjb25zdCBodG1sID0gbWFya2VkLnBhcnNlKG1hcmtkb3duKTtcbiAgICAgICAgY29uc3QgZG9tID0gbmV3IEpTRE9NKGh0bWwpO1xuXG4gICAgICAgIC8vIEV4dHJhY3QgYmVnaW5uaW5nIHRleHRcbiAgICAgICAgcm91dGUuZGF0YS5iZWdpbm5pbmdUZXh0ID0gJyc7XG4gICAgICAgIGNvbnN0IHBhcmFncmFwaHMgPSBkb20ud2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3AnKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhZ3JhcGhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgcGFyYWdyYXBoID0gcGFyYWdyYXBoc1tpXTtcbiAgICAgICAgICBpZiAocGFyYWdyYXBoLnRleHRDb250ZW50Py5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJvdXRlLmRhdGEuYmVnaW5uaW5nVGV4dCArPSBwYXJhZ3JhcGgudGV4dENvbnRlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyb3V0ZS5kYXRhLmJlZ2lubmluZ1RleHQubGVuZ3RoID4gMjAwKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFeHRyYWN0IGltYWdlc1xuICAgICAgICByb3V0ZS5kYXRhLmltYWdlVXJscyA9IFtdO1xuICAgICAgICBjb25zdCBpbWFnZUVsZW1zID0gZG9tLndpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbWcnKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbWFnZUVsZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgaW1hZ2UgPSBpbWFnZUVsZW1zW2ldO1xuICAgICAgICAgIHJvdXRlLmRhdGEuaW1hZ2VVcmxzLnB1c2goaW1hZ2Uuc3JjKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZTogYW55KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFtFc2FSb3V0ZVByb2Nlc3NdYCwgZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybihgW0VzYVJvdXRlUHJvY2Vzc11gLCAnQ291bGQgbm90IHBhcnNlIGZpbGUnLCByb3V0ZS50ZW1wbGF0ZUZpbGUpO1xuICAgIH1cblxuICAgIHJvdXRlc1tpXSA9IHJvdXRlO1xuICB9XG5cbiAgcmV0dXJuIHJvdXRlcztcbn07XG5cbnJlZ2lzdGVyUGx1Z2luKCdyb3V0ZVByb2Nlc3MnLCAnZXNhUm91dGVQcm9jZXNzJywgUGx1Z2luLCAxMDApO1xuIl19